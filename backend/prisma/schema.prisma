// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique
  passwordHash     String?
  oauthProvider    String?       // 'google' | 'facebook'
  oauthId          String?
  address          String?
  locationLat      Float?
  locationLng      Float?
  venmoHandle      String?
  zelleHandle      String?
  subscriptionTier String        @default("free") // 'free' | 'perpost' | 'unlimited'
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  items        Item[]
  transactions Transaction[]

  @@index([email])
  @@index([oauthProvider, oauthId])
  @@map("users")
}

model Item {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String
  imageUrls   String[] // Array of S3 URLs
  priceHigh   Float
  priceMid    Float
  priceLow    Float
  status      String   @default("draft") // 'draft' | 'posted' | 'sold'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  listings     Listing[]
  transactions Transaction[]

  @@index([userId])
  @@index([status])
  @@map("items")
}

model Listing {
  id                String    @id @default(uuid())
  itemId            String
  platform          String    // 'facebook' | 'craigslist' | 'offerup' | '5miles'
  platformListingId String?   // External platform ID
  status            String    @default("pending") // 'pending' | 'posted' | 'failed'
  postedAt          DateTime?
  createdAt         DateTime  @default(now())

  item          Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@index([itemId])
  @@index([platform])
  @@index([status])
  @@map("listings")
}

model Conversation {
  id                String    @id @default(uuid())
  listingId         String
  buyerContact      String    // email or phone
  messagesJson      Json      // Array of {role, content, timestamp}
  pickupScheduledAt DateTime?
  status            String    @default("active") // 'active' | 'scheduled' | 'completed' | 'cancelled'
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([status])
  @@map("conversations")
}

model Transaction {
  id            String    @id @default(uuid())
  itemId        String
  userId        String
  amount        Float
  platformFee   Float     // Our cut (5% or $0.50)
  paymentMethod String    // 'venmo' | 'zelle' | 'cash'
  status        String    @default("pending") // 'pending' | 'completed'
  completedAt   DateTime?
  createdAt     DateTime  @default(now())

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([itemId])
  @@index([status])
  @@map("transactions")
}
